// Code generated by MockGen. DO NOT EDIT.
// Source: query.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	hcl "github.com/hashicorp/hcl/v2"
	prepalert "github.com/mashiike/prepalert"
	gomock "go.uber.org/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// NewQuery mocks base method.
func (m *MockProvider) NewQuery(name string, body hcl.Body, evalCtx *hcl.EvalContext) (prepalert.Query, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewQuery", name, body, evalCtx)
	ret0, _ := ret[0].(prepalert.Query)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewQuery indicates an expected call of NewQuery.
func (mr *MockProviderMockRecorder) NewQuery(name, body, evalCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewQuery", reflect.TypeOf((*MockProvider)(nil).NewQuery), name, body, evalCtx)
}

// MockQuery is a mock of Query interface.
type MockQuery struct {
	ctrl     *gomock.Controller
	recorder *MockQueryMockRecorder
}

// MockQueryMockRecorder is the mock recorder for MockQuery.
type MockQueryMockRecorder struct {
	mock *MockQuery
}

// NewMockQuery creates a new mock instance.
func NewMockQuery(ctrl *gomock.Controller) *MockQuery {
	mock := &MockQuery{ctrl: ctrl}
	mock.recorder = &MockQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuery) EXPECT() *MockQueryMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockQuery) Run(ctx context.Context, evalCtx *hcl.EvalContext) (*prepalert.QueryResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, evalCtx)
	ret0, _ := ret[0].(*prepalert.QueryResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockQueryMockRecorder) Run(ctx, evalCtx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockQuery)(nil).Run), ctx, evalCtx)
}

// MockProviderDefinition is a mock of ProviderDefinition interface.
type MockProviderDefinition struct {
	ctrl     *gomock.Controller
	recorder *MockProviderDefinitionMockRecorder
}

// MockProviderDefinitionMockRecorder is the mock recorder for MockProviderDefinition.
type MockProviderDefinitionMockRecorder struct {
	mock *MockProviderDefinition
}

// NewMockProviderDefinition creates a new mock instance.
func NewMockProviderDefinition(ctrl *gomock.Controller) *MockProviderDefinition {
	mock := &MockProviderDefinition{ctrl: ctrl}
	mock.recorder = &MockProviderDefinitionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderDefinition) EXPECT() *MockProviderDefinitionMockRecorder {
	return m.recorder
}

// NewProvider mocks base method.
func (m *MockProviderDefinition) NewProvider(arg0 *prepalert.ProviderParameter) (prepalert.Provider, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProvider", arg0)
	ret0, _ := ret[0].(prepalert.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProvider indicates an expected call of NewProvider.
func (mr *MockProviderDefinitionMockRecorder) NewProvider(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProvider", reflect.TypeOf((*MockProviderDefinition)(nil).NewProvider), arg0)
}

// MockCompiledQuery is a mock of CompiledQuery interface.
type MockCompiledQuery struct {
	ctrl     *gomock.Controller
	recorder *MockCompiledQueryMockRecorder
}

// MockCompiledQueryMockRecorder is the mock recorder for MockCompiledQuery.
type MockCompiledQueryMockRecorder struct {
	mock *MockCompiledQuery
}

// NewMockCompiledQuery creates a new mock instance.
func NewMockCompiledQuery(ctrl *gomock.Controller) *MockCompiledQuery {
	mock := &MockCompiledQuery{ctrl: ctrl}
	mock.recorder = &MockCompiledQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCompiledQuery) EXPECT() *MockCompiledQueryMockRecorder {
	return m.recorder
}
