// Code generated by MockGen. DO NOT EDIT.
// Source: mackerel.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	mackerel "github.com/mackerelio/mackerel-client-go"
	gomock "go.uber.org/mock/gomock"
)

// MockMackerelClient is a mock of MackerelClient interface.
type MockMackerelClient struct {
	ctrl     *gomock.Controller
	recorder *MockMackerelClientMockRecorder
}

// MockMackerelClientMockRecorder is the mock recorder for MockMackerelClient.
type MockMackerelClientMockRecorder struct {
	mock *MockMackerelClient
}

// NewMockMackerelClient creates a new mock instance.
func NewMockMackerelClient(ctrl *gomock.Controller) *MockMackerelClient {
	mock := &MockMackerelClient{ctrl: ctrl}
	mock.recorder = &MockMackerelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMackerelClient) EXPECT() *MockMackerelClientMockRecorder {
	return m.recorder
}

// CreateGraphAnnotation mocks base method.
func (m *MockMackerelClient) CreateGraphAnnotation(annotation *mackerel.GraphAnnotation) (*mackerel.GraphAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGraphAnnotation", annotation)
	ret0, _ := ret[0].(*mackerel.GraphAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGraphAnnotation indicates an expected call of CreateGraphAnnotation.
func (mr *MockMackerelClientMockRecorder) CreateGraphAnnotation(annotation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGraphAnnotation", reflect.TypeOf((*MockMackerelClient)(nil).CreateGraphAnnotation), annotation)
}

// FindGraphAnnotations mocks base method.
func (m *MockMackerelClient) FindGraphAnnotations(service string, from, to int64) ([]mackerel.GraphAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGraphAnnotations", service, from, to)
	ret0, _ := ret[0].([]mackerel.GraphAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindGraphAnnotations indicates an expected call of FindGraphAnnotations.
func (mr *MockMackerelClientMockRecorder) FindGraphAnnotations(service, from, to interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGraphAnnotations", reflect.TypeOf((*MockMackerelClient)(nil).FindGraphAnnotations), service, from, to)
}

// FindHost mocks base method.
func (m *MockMackerelClient) FindHost(id string) (*mackerel.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHost", id)
	ret0, _ := ret[0].(*mackerel.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHost indicates an expected call of FindHost.
func (mr *MockMackerelClientMockRecorder) FindHost(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHost", reflect.TypeOf((*MockMackerelClient)(nil).FindHost), id)
}

// GetAlert mocks base method.
func (m *MockMackerelClient) GetAlert(arg0 string) (*mackerel.Alert, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlert", arg0)
	ret0, _ := ret[0].(*mackerel.Alert)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlert indicates an expected call of GetAlert.
func (mr *MockMackerelClientMockRecorder) GetAlert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlert", reflect.TypeOf((*MockMackerelClient)(nil).GetAlert), arg0)
}

// GetMonitor mocks base method.
func (m *MockMackerelClient) GetMonitor(arg0 string) (mackerel.Monitor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitor", arg0)
	ret0, _ := ret[0].(mackerel.Monitor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMonitor indicates an expected call of GetMonitor.
func (mr *MockMackerelClientMockRecorder) GetMonitor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitor", reflect.TypeOf((*MockMackerelClient)(nil).GetMonitor), arg0)
}

// GetOrg mocks base method.
func (m *MockMackerelClient) GetOrg() (*mackerel.Org, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrg")
	ret0, _ := ret[0].(*mackerel.Org)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrg indicates an expected call of GetOrg.
func (mr *MockMackerelClientMockRecorder) GetOrg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockMackerelClient)(nil).GetOrg))
}

// UpdateAlert mocks base method.
func (m *MockMackerelClient) UpdateAlert(alertID string, param mackerel.UpdateAlertParam) (*mackerel.UpdateAlertResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAlert", alertID, param)
	ret0, _ := ret[0].(*mackerel.UpdateAlertResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAlert indicates an expected call of UpdateAlert.
func (mr *MockMackerelClientMockRecorder) UpdateAlert(alertID, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAlert", reflect.TypeOf((*MockMackerelClient)(nil).UpdateAlert), alertID, param)
}

// UpdateGraphAnnotation mocks base method.
func (m *MockMackerelClient) UpdateGraphAnnotation(annotationID string, annotation *mackerel.GraphAnnotation) (*mackerel.GraphAnnotation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGraphAnnotation", annotationID, annotation)
	ret0, _ := ret[0].(*mackerel.GraphAnnotation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGraphAnnotation indicates an expected call of UpdateGraphAnnotation.
func (mr *MockMackerelClientMockRecorder) UpdateGraphAnnotation(annotationID, annotation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGraphAnnotation", reflect.TypeOf((*MockMackerelClient)(nil).UpdateGraphAnnotation), annotationID, annotation)
}
