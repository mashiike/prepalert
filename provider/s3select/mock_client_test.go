// Code generated by MockGen. DO NOT EDIT.
// Source: s3select_test.go

// Package s3select_test is a generated GoMock package.
package s3select_test

import (
	context "context"
	io "io"
	reflect "reflect"

	s3 "github.com/aws/aws-sdk-go-v2/service/s3"
	gomock "go.uber.org/mock/gomock"
)

// MockS3SelectClient is a mock of S3SelectClient interface.
type MockS3SelectClient struct {
	ctrl     *gomock.Controller
	recorder *MockS3SelectClientMockRecorder
}

// MockS3SelectClientMockRecorder is the mock recorder for MockS3SelectClient.
type MockS3SelectClientMockRecorder struct {
	mock *MockS3SelectClient
}

// NewMockS3SelectClient creates a new mock instance.
func NewMockS3SelectClient(ctrl *gomock.Controller) *MockS3SelectClient {
	mock := &MockS3SelectClient{ctrl: ctrl}
	mock.recorder = &MockS3SelectClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockS3SelectClient) EXPECT() *MockS3SelectClientMockRecorder {
	return m.recorder
}

// ListObjectsV2 mocks base method.
func (m *MockS3SelectClient) ListObjectsV2(arg0 context.Context, arg1 *s3.ListObjectsV2Input, arg2 ...func(*s3.Options)) (*s3.ListObjectsV2Output, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListObjectsV2", varargs...)
	ret0, _ := ret[0].(*s3.ListObjectsV2Output)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListObjectsV2 indicates an expected call of ListObjectsV2.
func (mr *MockS3SelectClientMockRecorder) ListObjectsV2(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListObjectsV2", reflect.TypeOf((*MockS3SelectClient)(nil).ListObjectsV2), varargs...)
}

// SelectObjectContentWithWriter mocks base method.
func (m *MockS3SelectClient) SelectObjectContentWithWriter(ctx context.Context, w io.Writer, params *s3.SelectObjectContentInput, optFns ...func(*s3.Options)) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, w, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectObjectContentWithWriter", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectObjectContentWithWriter indicates an expected call of SelectObjectContentWithWriter.
func (mr *MockS3SelectClientMockRecorder) SelectObjectContentWithWriter(ctx, w, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, w, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectObjectContentWithWriter", reflect.TypeOf((*MockS3SelectClient)(nil).SelectObjectContentWithWriter), varargs...)
}
