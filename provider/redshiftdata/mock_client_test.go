// Code generated by MockGen. DO NOT EDIT.
// Source: redshiftdata_test.go

// Package redshiftdata_test is a generated GoMock package.
package redshiftdata_test

import (
	context "context"
	reflect "reflect"

	redshiftdata "github.com/aws/aws-sdk-go-v2/service/redshiftdata"
	gomock "go.uber.org/mock/gomock"
)

// MockRedshiftDataClient is a mock of RedshiftDataClient interface.
type MockRedshiftDataClient struct {
	ctrl     *gomock.Controller
	recorder *MockRedshiftDataClientMockRecorder
}

// MockRedshiftDataClientMockRecorder is the mock recorder for MockRedshiftDataClient.
type MockRedshiftDataClientMockRecorder struct {
	mock *MockRedshiftDataClient
}

// NewMockRedshiftDataClient creates a new mock instance.
func NewMockRedshiftDataClient(ctrl *gomock.Controller) *MockRedshiftDataClient {
	mock := &MockRedshiftDataClient{ctrl: ctrl}
	mock.recorder = &MockRedshiftDataClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedshiftDataClient) EXPECT() *MockRedshiftDataClientMockRecorder {
	return m.recorder
}

// BatchExecuteStatement mocks base method.
func (m *MockRedshiftDataClient) BatchExecuteStatement(ctx context.Context, params *redshiftdata.BatchExecuteStatementInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.BatchExecuteStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BatchExecuteStatement", varargs...)
	ret0, _ := ret[0].(*redshiftdata.BatchExecuteStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchExecuteStatement indicates an expected call of BatchExecuteStatement.
func (mr *MockRedshiftDataClientMockRecorder) BatchExecuteStatement(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchExecuteStatement", reflect.TypeOf((*MockRedshiftDataClient)(nil).BatchExecuteStatement), varargs...)
}

// CancelStatement mocks base method.
func (m *MockRedshiftDataClient) CancelStatement(ctx context.Context, params *redshiftdata.CancelStatementInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.CancelStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelStatement", varargs...)
	ret0, _ := ret[0].(*redshiftdata.CancelStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelStatement indicates an expected call of CancelStatement.
func (mr *MockRedshiftDataClientMockRecorder) CancelStatement(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelStatement", reflect.TypeOf((*MockRedshiftDataClient)(nil).CancelStatement), varargs...)
}

// DescribeStatement mocks base method.
func (m *MockRedshiftDataClient) DescribeStatement(ctx context.Context, params *redshiftdata.DescribeStatementInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.DescribeStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeStatement", varargs...)
	ret0, _ := ret[0].(*redshiftdata.DescribeStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeStatement indicates an expected call of DescribeStatement.
func (mr *MockRedshiftDataClientMockRecorder) DescribeStatement(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeStatement", reflect.TypeOf((*MockRedshiftDataClient)(nil).DescribeStatement), varargs...)
}

// ExecuteStatement mocks base method.
func (m *MockRedshiftDataClient) ExecuteStatement(ctx context.Context, params *redshiftdata.ExecuteStatementInput, optFns ...func(*redshiftdata.Options)) (*redshiftdata.ExecuteStatementOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecuteStatement", varargs...)
	ret0, _ := ret[0].(*redshiftdata.ExecuteStatementOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecuteStatement indicates an expected call of ExecuteStatement.
func (mr *MockRedshiftDataClientMockRecorder) ExecuteStatement(ctx, params interface{}, optFns ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteStatement", reflect.TypeOf((*MockRedshiftDataClient)(nil).ExecuteStatement), varargs...)
}

// GetStatementResult mocks base method.
func (m *MockRedshiftDataClient) GetStatementResult(arg0 context.Context, arg1 *redshiftdata.GetStatementResultInput, arg2 ...func(*redshiftdata.Options)) (*redshiftdata.GetStatementResultOutput, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatementResult", varargs...)
	ret0, _ := ret[0].(*redshiftdata.GetStatementResultOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatementResult indicates an expected call of GetStatementResult.
func (mr *MockRedshiftDataClientMockRecorder) GetStatementResult(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatementResult", reflect.TypeOf((*MockRedshiftDataClient)(nil).GetStatementResult), varargs...)
}
